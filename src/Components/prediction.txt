// import Navbar from './Navbar' 
// import { useState } from "react";
// import axios from "axios"; // Removed curly braces

// const Prediction = () => {
//   const [predictionData, setPredictionData] = useState(null); // Use null instead of an empty object
//   const [userInput, setUserInput] = useState({
//     investment_amount: "",
//     risk_tolerance: "",
//     investment_period: "",
//   });
//   const [err, setErr] = useState(false);

//   const changeHandler = (e) => {
//     setUserInput((prevData) => ({
//       ...prevData,
//       [e.target.name]: e.target.value,
//     }));
//   };

//   const calculateStock = async () => {
//     try {
//       // const response = await axios.get("/predict", { params: userInput });
//       const response={
//         "accuracy": 0.9780518907253911,
//         "annualized_return_and_risk_in_percentage": {
//             "Annualized_Return_and_Risk": [
//                 {
//                     "Return": "31.11%",
//                     "Risk": "28.85%",
//                     "Sharpe": "1.02",
//                     "Ticker": "LT.NS"
//                 },
//                 {
//                     "Return": "19.62%",
//                     "Risk": "24.88%",
//                     "Sharpe": "0.72",
//                     "Ticker": "BRITANNIA.NS"
//                 },
//                 {
//                     "Return": "8.50%",
//                     "Risk": "23.34%",
//                     "Sharpe": "0.29",
//                     "Ticker": "DABUR.NS"
//                 },
//                 {
//                     "Return": "5.15%",
//                     "Risk": "23.43%",
//                     "Sharpe": "0.15",
//                     "Ticker": "PFIZER.NS"
//                 },
//                 {
//                     "Return": "37.16%",
//                     "Risk": "35.05%",
//                     "Sharpe": "1.01",
//                     "Ticker": "NHPC.NS"
//                 },
//                 {
//                     "Return": "21.95%",
//                     "Risk": "26.58%",
//                     "Sharpe": "0.76",
//                     "Ticker": "DRREDDY.NS"
//                 },
//                 {
//                     "Return": "29.23%",
//                     "Risk": "20.06%",
//                     "Sharpe": "1.37",
//                     "Ticker": "MP"
//                 }
//             ]
//         },
//         "investment_per_stock": 8333.333333333334,
//         "investment_return": 12500,
//         "investment_value_after_period": 45833.333333333336,
//         "mae": 0.021948109274608857,
//         "optimized_portfolio_annualized_return": 29.225644690108492,
//         "optimized_portfolio_sharper_ratio": 1.3723212317941043,
//         "optimized_portfolio_weights_in_percentage": {
//             "Optimized_Portfolio_Weights_in_Percentage": [
//                 {
//                     "Ticker": "LT.NS",
//                     "Weight": "32.82%"
//                 },
//                 {
//                     "Ticker": "BRITANNIA.NS",
//                     "Weight": "14.01%"
//                 },
//                 {
//                     "Ticker": "DABUR.NS",
//                     "Weight": "0.00%"
//                 },
//                 {
//                     "Ticker": "PFIZER.NS",
//                     "Weight": "0.00%"
//                 },
//                 {
//                     "Ticker": "NHPC.NS",
//                     "Weight": "30.21%"
//                 },
//                 {
//                     "Ticker": "DRREDDY.NS",
//                     "Weight": "22.96%"
//                 }
//             ]
//         },
//         "rmse": 0.14814894287374736,
//         "top_stock_tickers": [
//             "LT.NS",
//             "BRITANNIA.NS",
//             "DABUR.NS",
//             "PFIZER.NS",
//             "NHPC.NS",
//             "DRREDDY.NS"
//         ]
//     }
//       console.log(response);
//       if (!response ) {
//         console.log("An error occurred while fetching the prediction");
//         setErr(true);
//         return;
//       }

//       setPredictionData(response);
//     } catch (error) {
//       console.log("An error occurred while fetching the prediction", error);
//       setErr(true);
//     }
//   };
//  <Navbar></Navbar>
//   return (
//     <div className="">
//         <Navbar></Navbar>
    
//     <div className="container mx-auto p-6 bg-white shadow-lg rounded-lg mt-10 h-[900px]">
//   <div className="flex flex-row">
//     <div className="graphdiv flex-1 p-1 border-r border-gray-300 overflow-y-auto">
//       {/* Placeholder for the graph */}
//       <div className="w-full h-full bg-gray-200 rounded flex items-center justify-center">
//         <p className="text-gray-500">Graph will be here</p>
//       </div>
//     </div>
//     <div className="resultdiv flex-1 p-[150px] space-y-9">
//       <div className="inputdiv flex flex-col md:flex-row md:space-x-4 mb-4">
//         <div className="amount">
//           <label htmlFor="principal" className="block text-sm font-medium text-gray-700">
//             Principal
//           </label>
//           <input
//             type="text"
//             name="principal"
//             onChange={changeHandler}
//             className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 bg-gray-50"
//           />
//         </div>
//         <div className="period">
//           <label htmlFor="investment_period" className="block text-sm font-medium text-gray-700">
//             Investment Period
//           </label>
//           <input
//             type="text"
//             name="investment_period"
//             onChange={changeHandler}
//             className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 bg-gray-50"
//           />
//         </div>
//         <div className="risk">
//           <label htmlFor="risk_tolerance" className="block text-sm font-medium text-gray-700">
//             Risk Tolerance
//           </label>
//           <select
//             name="risk_tolerance"
//             onChange={changeHandler}
//             className="mt-1 block w-full rounded-md border-gray-300 shadow-sm  focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 bg-gray-50"
//           >
//             <option value="">Select...</option>
//             <option value="low">Low</option>
//             <option value="medium">Medium</option>
//             <option value="high">High</option>
//           </select>
//         </div>
//       </div>
//       <button
//         onClick={calculateStock}
//         className="w-full bg-blue-500 text-white font-semibold py-2 px-4 rounded border-slate-600 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400"
//       >
//         Calculate
//       </button>

//       {err && <div className="text-red-500">An error occurred. Please try again.</div>}

//       <div className="results mt-6">
//         {!predictionData ? (
//           <div className="text-gray-500">Loading...</div>
//         ) : (
//           <div className="maindiv space-y-6">
//             <div className="upperdiv grid grid-cols-1 md:grid-cols-3 gap-4">
//               <div className="totalInvestment p-4 bg-gray-100 rounded shadow">
//                 <p className="font-medium text-gray-700">Total Invested</p>
//                 <p className="text-xl font-semibold text-gray-900">
//                   {userInput.investment_amount}
//                 </p>
//               </div>
//               <div className="total_gains p-4 bg-gray-100 rounded shadow">
//                 <p className="font-medium text-gray-700">Total Gains</p>
//                 <p className="text-xl font-semibold text-gray-900">
//                   {predictionData.investment_value_after_period- userInput.investment_amount}
//                 </p>
//               </div>
//               <div className="future_return p-4 bg-gray-100 rounded shadow">
//                 <p className="font-medium text-gray-700">Future Return</p>
//                 <p className="text-xl font-semibold text-gray-900">
//                   {predictionData.investment_value_after_period}
//                 </p>
//               </div>
//             </div>
//             <div className="lowerdiv">
//               <div className="headings grid grid-cols-5 font-medium text-gray-700 mb-2">
//                 <div>Fund Name</div>
//                 <div>Risk</div>
//                 <div>Sharpe</div>
//                 <div>Returns</div>
//                 <div>Allocation Percentage</div>
               
//               </div>
//               <div className="data space-y-2">
//                 {predictionData.portfolio && predictionData.portfolio.map((obj, index) => (
//                   <div key={index} className="row grid grid-cols-3 gap-4 p-2 bg-white rounded shadow">
//                     <div className="stock">{obj.stock_name}</div>
//                     <div className="expectedReturn">{obj.expected_return}</div>
//                     <div className="allocationpercent">{obj.allocation_percentage}</div>
//                   </div>
//                 ))}
//               </div>
//             </div>
//           </div>
//         )}
//       </div>
//     </div>
//   </div>
// </div>


//     </div>
//   );
// };

// // export default Prediction;
import React, { useState } from "react";
import Navbar from './Navbar';
import axios from "axios"; // Removed curly braces

const Prediction = () => {
  const [predictionData, setPredictionData] = useState(null); // Use null instead of an empty object
  const [userInput, setUserInput] = useState({
    investment_amount: "",
    risk_tolerance: "",
    investment_period: "",
  });
  const [err, setErr] = useState(false);

  const changeHandler = (e) => {
    setUserInput((prevData) => ({
      ...prevData,
      [e.target.name]: e.target.value,
    }));
  };

  const calculateStock = async () => {
    try {
      // const response = await axios.get("/predict", { params: userInput });
      const response = {
        "accuracy": 0.9780518907253911,
        "annualized_return_and_risk_in_percentage": {
          "Annualized_Return_and_Risk": [
            {
              "Return": "31.11%",
              "Risk": "28.85%",
              "Sharpe": "1.02",
              "Ticker": "LT.NS"
            },
            {
              "Return": "19.62%",
              "Risk": "24.88%",
              "Sharpe": "0.72",
              "Ticker": "BRITANNIA.NS"
            },
            {
              "Return": "8.50%",
              "Risk": "23.34%",
              "Sharpe": "0.29",
              "Ticker": "DABUR.NS"
            },
            {
              "Return": "5.15%",
              "Risk": "23.43%",
              "Sharpe": "0.15",
              "Ticker": "PFIZER.NS"
            },
            {
              "Return": "37.16%",
              "Risk": "35.05%",
              "Sharpe": "1.01",
              "Ticker": "NHPC.NS"
            },
            {
              "Return": "21.95%",
              "Risk": "26.58%",
              "Sharpe": "0.76",
              "Ticker": "DRREDDY.NS"
            },
            {
              "Return": "29.23%",
              "Risk": "20.06%",
              "Sharpe": "1.37",
              "Ticker": "MP"
            }
          ]
        },
        "investment_per_stock": 8333.333333333334,
        "investment_return": 12500,
        "investment_value_after_period": 45833.333333333336,
        "mae": 0.021948109274608857,
        "optimized_portfolio_annualized_return": 29.225644690108492,
        "optimized_portfolio_sharper_ratio": 1.3723212317941043,
        "optimized_portfolio_weights_in_percentage": {
          "Optimized_Portfolio_Weights_in_Percentage": [
            {
              "Ticker": "LT.NS",
              "Weight": "32.82%"
            },
            {
              "Ticker": "BRITANNIA.NS",
              "Weight": "14.01%"
            },
            {
              "Ticker": "DABUR.NS",
              "Weight": "0.00%"
            },
            {
              "Ticker": "PFIZER.NS",
              "Weight": "0.00%"
            },
            {
              "Ticker": "NHPC.NS",
              "Weight": "30.21%"
            },
            {
              "Ticker": "DRREDDY.NS",
              "Weight": "22.96%"
            }
          ]
        },
        "rmse": 0.14814894287374736,
        "top_stock_tickers": [
          "LT.NS",
          "BRITANNIA.NS",
          "DABUR.NS",
          "PFIZER.NS",
          "NHPC.NS",
          "DRREDDY.NS"
        ]
      };
      console.log(response);
      if (!response) {
        console.log("An error occurred while fetching the prediction");
        setErr(true);
        return;
      }

      setPredictionData(response);
    } catch (error) {
      console.log("An error occurred while fetching the prediction", error);
      setErr(true);
    }
  };

  return (
    <div className="">
      <Navbar />
      <div className="container mx-auto p-6 bg-white shadow-lg rounded-lg mt-10 h-[900px]">
        <div className="flex flex-row">
          <div className="graphdiv flex-1 p-1 border-r border-gray-300 overflow-y-auto">
            {/* Placeholder for the graph */}
            <div className="w-full h-full bg-gray-200 rounded flex items-center justify-center">
              <p className="text-gray-500">Graph will be here</p>
            </div>
          </div>
          <div className="resultdiv flex-1 p-[150px] space-y-9">
            <div className="inputdiv flex flex-col md:flex-row md:space-x-4 mb-4">
              <div className="amount">
                <label htmlFor="principal" className="block text-sm font-medium text-gray-700">
                  Principal
                </label>
                <input
                  type="text"
                  name="investment_amount"
                  onChange={changeHandler}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 bg-gray-50"
                />
              </div>
              <div className="period">
                <label htmlFor="investment_period" className="block text-sm font-medium text-gray-700">
                  Investment Period
                </label>
                <input
                  type="text"
                  name="investment_period"
                  onChange={changeHandler}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 bg-gray-50"
                />
              </div>
              <div className="risk">
                <label htmlFor="risk_tolerance" className="block text-sm font-medium text-gray-700">
                  Risk Tolerance
                </label>
                <select
                  name="risk_tolerance"
                  onChange={changeHandler}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm  focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 bg-gray-50"
                >
                  <option value="">Select...</option>
                  <option value="low">Low</option>
                  <option value="medium">Medium</option>
                  <option value="high">High</option>
                </select>
              </div>
            </div>
            <button
              onClick={calculateStock}
              className="w-full bg-blue-500 text-white font-semibold py-2 px-4 rounded border-slate-600 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400"
            >
              Calculate
            </button>

            {err && <div className="text-red-500">An error occurred. Please try again.</div>}

            <div className="results mt-6">
              {!predictionData ? (
                <div className="text-gray-500">Loading...</div>
              ) : (
                <div className="maindiv space-y-6">
                  <div className="upperdiv grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="totalInvestment p-4 bg-gray-100 rounded shadow">
                      <p className="font-medium text-gray-700">Total Invested</p>
                      <p className="text-xl font-semibold text-gray-900">
                        {userInput.investment_amount}
                      </p>
                    </div>
                    <div className="total_gains p-4 bg-gray-100 rounded shadow">
                      <p className="font-medium text-gray-700">Total Gains</p>
                      <p className="text-xl font-semibold text-gray-900">
                        {predictionData.investment_value_after_period - userInput.investment_amount}
                      </p>
                    </div>
                    <div className="future_return p-4 bg-gray-100 rounded shadow">
                      <p className="font-medium text-gray-700">Future Return</p>
                      <p className="text-xl font-semibold text-gray-900">
                        {predictionData.investment_value_after_period}
                      </p>
                    </div>
                  </div>
                  <div className="lowerdiv">
                    <div className="headings grid grid-cols-5 font-medium text-gray-700 mb-2">
                      <div>Fund Name</div>
                      <div>Risk</div>
                      <div>Sharpe</div>
                      <div>Returns</div>
                      <div>Allocation Percentage</div>
                    </div>
                    <div className="data space-y-2">
                      {predictionData.annualized_return_and_risk_in_percentage.Annualized_Return_and_Risk.map(
                        (obj, index) => (
                          <div key={index} className="row grid grid-cols-5 gap-4 p-2 bg-white rounded shadow">
                            <div className="stock">{obj.Ticker}</div>
                            <div className="risk">{obj.Risk}</div>
                            <div className="sharpe">{obj.Sharpe}</div>
                            <div className="return">{obj.Return}</div>
                            <div className="weight">
                              {
                                predictionData.optimized_portfolio_weights_in_percentage
                                  .Optimized_Portfolio_Weights_in_Percentage.find(
                                    (weightObj) => weightObj.Ticker === obj.Ticker
                                  )?.Weight || "N/A"
                              }
                            </div>
                          </div>
                        )
                      )}
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Prediction;
